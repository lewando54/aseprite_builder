name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    # ... (previous check-version job remains unchanged)

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest]
       fail-fast: false    
    steps:
      - name: Checkout Aseprite
        uses: actions/checkout@v3
        with:
          repository: aseprite/aseprite
          ref: ${{ needs.check-version.outputs.latest_tag }}
          submodules: recursive

      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: 5568f110b509a9fd90711978a7cb76bae75bb092

      - name: Install dependencies
        run: |
          vcpkg install freetype:x64-windows-static
          vcpkg install harfbuzz:x64-windows-static
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV

      - name: Cache Skia
        id: cache-skia
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/skia
          key: ${{ runner.os }}-skia-m81

      - name: Download and setup Skia
        if: steps.cache-skia.outputs.cache-hit != 'true'
        run: |
          curl -Lo skia.zip https://github.com/aseprite/skia/releases/download/m81-b607b32047/Skia-Windows-Release-x64.zip
          7z x skia.zip -o"${{ github.workspace }}/skia"
          echo "SKIA_DIR=${{ github.workspace }}/skia" >> $GITHUB_ENV
          echo "SKIA_LIBRARY_DIR=${{ github.workspace }}/skia/out/Release-x64" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR=${{ env.SKIA_DIR }} `
            -DSKIA_LIBRARY_DIR=${{ env.SKIA_LIBRARY_DIR }} `
            -DFREETYPE_INCLUDE_DIR="${{ env.VCPKG_ROOT }}/installed/x64-windows-static/include/freetype2" `
            -DHARFBUZZ_INCLUDE_DIR="${{ env.VCPKG_ROOT }}/installed/x64-windows-static/include/harfbuzz"

      - name: Build Aseprite
        run: |
          cd build
          msbuild aseprite.sln /p:Configuration=${{ env.BUILD_TYPE }} /m

      - name: Create release package
        run: |
          mkdir release
          copy build\bin\${{ env.BUILD_TYPE }}\aseprite.exe release\
          copy build\bin\${{ env.BUILD_TYPE }}\*.dll release\
          echo '# This file is here so Aseprite behaves as a portable program' > release\aseprite.ini
          7z a -tzip Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip .\release\*

      - name: Upload release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sL `
            -X POST `
            -H "Authorization: token $env:GITHUB_TOKEN" `
            -H "Content-Type: application/zip" `
            -H "Accept: application/vnd.github.v3+json" `
            --data-binary "@Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip" `
            "${{ needs.check-version.outputs.upload_url }}?name=Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip"